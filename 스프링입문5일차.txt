스프링 입문 5일차

회원 서비스 개발
->회원 레포지토리와 도메인을 이용, 실제 비즈니스에 필요한 로직을 개발.

join 회원 가입.
이름의 중복을 허용하지 않는 회원가입

원래같으면 그냥 memberRepository.save(member);하면 되는데,
name의 중복 확인해야함

*꿀팁-> ctrl+alt+v 하면 해당 자료형의 return값에 맞게끔 변수가 자동 생성된다.

*자바 람다식
=익명함수.
        Optional<Member> result = memberRepository.findByName(member.getName());
        result.ifPresent(m->{
            throw new IllegalStateException("이미 존재하는 회원입니다.");
        });
위의 경우
result에 해당하는 Optinal로 감싸진 Member 객체에 대하여
Optional덕에 쓸수 있는 ifPresent메소드를 이용, 바로 오버라이드해서 사용하는것
Member객체가 있으면 ->exception발생(이미 존재하는 회원)

근데, 위처럼 Optional 타입으로 객체를 반환하면 좋지 않고, memberRepository의
findByName이 Optional로 return되는걸 알기때문에 바로 return도 가능( 더 생략)
        memberRepository.findByName(member.getName()).ifPresent(m->{
            throw new IllegalStateException("이미 존재하는 회원입니다.");
        });
이렇게. 이런 형태로 코드가 주어지면 어떻게 작동하는지 생각해둘 것.
근데 위같은 경우는 꼬리에 꼬리를 무는 형태니까, 메소드로 정리해서 따로 정의해두면
호출할때 더 직관적이고, 코드가 깔끔해진다.

*꿀팁 이럴때 위의 코드를 바로 메서드화 시키는 단축키가 있는데, ctrl+alt+m이다.
ctrl+t하면 리팩토링 관련 단축키들이 쭈르륵 나온다.


왜 서비스개발과 repository개발을 분리하느냐?
서비스는 클라이언트와 소통하기위한 비즈니스 용어를 더 담아서 개발하고(더 복잡)
repository는 서비스를 구현하기 위한 개발자용 메서드들을 담아두는 용도정도로 생각.(더 단순)


서비스 테스트 케이스 개발
->이전엔 직접 repository의 테스트 케이스를 패키지부터 메서드까지 일일히 코딩했지만,
클래스의 이름에 ctrl+shift+t-> 자동 테스트 케이스 패키지 + 메서드(디폴트형태) 생성. 매우 편리...


테스트의 경우, 메서드 이름을 한글로 작성해도 괜찮긴 하다.

테스트클래스의 경우 실제 프로젝트 파일에 안올라가기도 하고, 특정 흐름에 따라 진행되기때문에
given,when,then의 흐름으로 작성하는게 좋다.

뭐가 주어지고, 실행 했을때, 이게 나와야 돼. 형태.이걸 바탕으로 변형시켜서 적용하는걸 추천.


테스트 케이스의 경우 일반적인 흐름을 확인하는것보다 예외가 튀는걸 제대로 잡는지
확인하는게 훨씬 중요하다. 그래서 예외케이스도 항상 테스트로 만들어줘야함
(try catch로 하면 되고, exception의 경우 main에 있는 exception과 맞춰서 catch문에 넣어주면 됨)

**테스트문에서 많이 쓰는 assert(Assertion)
일단, JUnit의 Assertion과 assertj의 Assertion 두개가 있고, 각각 쓸수 있는 메서드가 다르며
assertThat의 경우 후자를 import해야 쓸수 있음.

assert관련된건 해당 파라미터가 true면 pass, false면 에러발생.

근데 try catch의 경우 "실무"에선 좀 비효율적인 코드.
->assertThorws후에 람다식을 이용해서 더 간편하고 직관적인 코드로 짤수 있음

**assertThrows
assertThrows(Class<> classType,Executable executable)
첫번째 인자로 발생할 "예외클래스"의 클래스타입을 받는다.
두번째 인자를 실행해서 첫번째 인자의 classType과 맞는지 체크(보통 람다식을 씀) 

->
//        try{
//            memberService.join(member2);
//            fail();
//        }
//        catch (IllegalStateException e){
//            assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다.");
//            //assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다.123123");
//        }
이게

assertThrows(IllegalStateException.class, () -> memberService.join(member2));
이 한줄로 줄여짐.

memberService.join(member2)를 실행했을때 join을 정의할때 만들었던 중복경우인
IllegalStateException이 발생하는지 IllegalStateException.class로 받아서 확인한다.


위의 assertThrows는 exception으로 발생한 메세지도 담을수 있는데,
IllegalStateException e = 
assertThrows(IllegalStateException.class, () -> memberService.join(member2));
로 변수로 받아서
assertThat(e.getMessage()).isEqualTo();로 맞는지 틀린지 확인 가능!


**여기서도 저번 repository 테스트 케이스 작성처럼
"순서에 상관없는" 테스트 메서드 보장이 되어야함
->AfterEach 어노테이션 후 레포지토리를 clear해줘야함.
근데 여긴 service Test인데?
-> 레포지토리 객체를 만들어서 aftereach로 돌려도 정상적으로 clear가 된다.

근데, TestCase에서 memberService객체와 memberRepository객체는 같이 생성된 객체가 아니여서
동기화에 있어서 불안정성을 띈다.
->MemberService 클래스의 memberRepository객체를 생성자의 인자로 받아서 넣고,

TestCase의 @BeforeEach 어노테이션을 이용, 테스트 전에 각 객체를 세팅해 놓을 수 있어서
memberRepository를 만들고,
memberService=new MemberService(memberRepository);로 하면
테스트를 실행할때 멤버서비스 객체와 멤버레포지토리 객체가 연동된 상태로 같이 동작해서
오류 날 걱정을 덜어도 된다.
--->Dependency Injection(의존 주입) DI.
멤버레포지토리를 외부에서 넣어줌.

