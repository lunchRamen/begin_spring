스프링 입문 10일차

______________________________________________________________________________________
스프링 데이터 JPA

스프링 부트+ JPA->개발성 향상

스프링 데이터 JPA:인터페이스만으로 구현 가능.
CRUD기능조차, 스프링데이터 JPA가 제공.

->개발자는 핵심비즈니스로직만 처리하면 되게끔 스프링데이터 JPA가 도와준다.

caution:JPA를 선행한 후 스프링데이터JPA를 배우는게 효과가 있다.
why? 스프링데이터JPA는 JPA의 반복코드를 줄여주는 라이브러리여서 선행이 필요.

*팁:인터페이스끼리의 상속은 implements가 아닌 extends다.

스프링데이터JPA의 경우는, 인터페이스만 만들어도 구현체를 빈에 자동으로
만들어줌.

*생성자,getter setter등 자동 생성: alt+insert

스프링 데이터 JPA의 계층구조는
JPA레포지토리가 우리가 평범하게 생각하는 db의 대부분 기능들을
메서드화 시켜서 제공하고, 이 JPA레포지토리가
PagingAndSortingRepository->CrueRepository->Repository이런식으로 계층화됨.
그리고 SpringDataJpaMemberRepository는 인터페이스인데
어떻게 구현이 되냐? 그리고 findByName은 왜 만든거냐?라고하면
나머지는 JpaRepository에 동일한 이름 메서드로 대체가 되지만
findByName은 없어서 만드는데,
findBy(xxx)의 경우 스프링데이터JPA가
알아서 select m from Member m where m.name=?식으로
JPQL쿼리를 만들고, 이걸 SQL화해서 db에 쏴주는 형식으로
"메서드를 어떤 방식으로 지으면, 어떻게 쿼리가 생성되게끔 하는지"까지
관리하고 처리해주고있다.->매우 유용하다.

->여기까지가 스프링DB접근기술에 대해 알아봄.
flow
H2 DB설치
JDBC
db를 물린 testcase작성.
JDBC Template
JPA
Spring data JPA


______________________________________________________________________________________


AOP
Aspect Oriented Programming
관점 지향 프로그래밍.

AOP가 필요한 상황
모든 메소드의 호출 시간 측정 요구?
->모든 메소드에 시간측정로직을 추가해서 각 메서드의 호출시간 기록.
->각 메서드마다 try finally로 구하고, 수정사항 생길시 또 다 수정해줘야함.

이럴때 생기는 문제점
회원가입, 회원 조회에 시간을 측정하는 기능은 핵심 관심 사항이 아니다.
시간을 측정하는 로직은 공통 관심 사항이다.
시간을 측정하는 로직과 핵심 비즈니스의 로직이 섞여서 유지보수가 어렵다.
시간을 측정하는 로직을 별도의 공통 로직으로 만들기 매우 어렵다.
시간을 측정하는 로직을 변경할 때 모든 로직을 찾아가면서 변경해야 한다.


->AOP를 적용하면, 한번에 관리가능.
공통관심사항과 핵심관심사항을 "분리"
공통관심사항:시간측정로직.

AOP는 정형화된게 아닌 상황마다 다르게 만드는거라, 빈으로 등록해서
사용하는게 좋다.

aop클래스 위엔 @Aspect를

클래스의 시작엔
@Around("execution(* hello.hellospring..*(..))")로
실행할 메서드들의 범위를 정해줌.

이렇게 해주면,
회원가입, 회원 조회등 핵심 관심사항과 시간을 측정하는 공통 관심 사항을 분리한다.
시간을 측정하는 로직을 별도의 공통 로직으로 만들었다.
핵심 관심 사항을 깔끔하게 유지할 수 있다.
변경이 필요하면 이 로직만 변경하면 된다.
원하는 적용 대상을 선택할 수 있다.

AOP적용 전엔
컨트롤러가 서비스빈을 작동시킴.
AOP적용 후엔
컨트롤러가 AOP로 만든 가짜 빈(프록시)을 작동시키고,
이 가짜빈이 실행되고 join.proceed()로 진짜빈을 동작시켜줌.



______________________________________________________________________________________


강의 정리

spring boot를 사용한 프로젝트 생성.
설치되면서 가져온 external library들(필요한것들 위주) 살펴봄
View 환경설정.
빌드,실행 확인

정적 컨텐츠(파일을 그대로 내려주는것)
MVC Template engine ->동적 활동 결과를 서버에 내려주는 것.
API:JSON스타일로 변환해서 서버에 내려주는 것.

회원 관리 예제
비즈니스 요구사항 정리
회원 도메인과 레포지토리 생성
회원 레포지토리 테스트케이스 작성
회원 서비스 개발
서비스 테스트

스프링 빈과 의존관계
컴포넌트 스캔과 자동 의존관계 설정.(DI를 위해) @Component
자바코드로 직정 스프링 빈 등록. SpringConfig

회원 관리 예제 -웹 MVC개발
홈화면 추가,회원등록,회원조회

스프링 DB접근 기술
H2 DB설치
JDBC
JDBC template
JPA
SpringDataJPA

AOP
AOP가 필요한 상황->반복적으로 코드의 시작 종료를 만들어야하는 경우.
AOP 적용->AOP로 가짜빈을 만들어서 사이에 끼워넣어서 적용.


______________________________________________________________________________________

다음으로

지금까진 얇고 넓게 공부했음.
이젠 하나하나씩 깊게 공부할 차례.
그러나, 스프링은 엄청 큰 생태계이기때문에
모든것을 깊게 알 필요는 없다.
내가 활용할 부분들에 있어서만 깊게 공부하면 된다.
->핵심 원리를 이해 & 문제 발생시 어디서부터 찾아 올라가야되는지 알아내는 능력

앞으로 스프링 완전 정복 & 스프링부트와 JPA 실무 들으면 될듯.
(빠르게 빠르게 훑고 정리하면서 넘어가기)


스프링의 기술들이 "왜" 쓰는지 예제를 통해 이해해가며 학습하는 방식.




















